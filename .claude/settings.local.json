{
  "permissions": {
    "allow": [
      "Bash(chmod:*)",
      "Bash(git init:*)",
      "Bash(git branch:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nInitial commit: Vividly MVP setup\n\nComplete documentation and infrastructure setup:\n- Architecture and system design documentation\n- API specifications and database schemas  \n- GitHub Actions CI/CD pipelines (dev/staging/prod)\n- Terraform infrastructure as code for GCP\n- Dockerfiles for all services\n- Development environment setup guides\n- Automation scripts for Git, GitHub, and GCP setup\n- Security architecture and AI safety guardrails\n- Testing strategy and integration specifications\n\nðŸ¤– Generated with Claude Code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git checkout:*)",
      "Bash(gh auth status:*)",
      "Bash(gh repo create:*)",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(gh repo edit:*)",
      "Bash(gh label create:*)",
      "Bash(brew install:*)",
      "Bash(export PATH=\"/opt/homebrew/share/google-cloud-sdk/bin:$PATH\")",
      "Bash(gcloud version:*)",
      "Bash(export CLOUDSDK_CONFIG=\"$HOME/.gcloud\")",
      "Bash(gcloud auth login:*)",
      "Bash(gcloud auth:*)",
      "Bash(gcloud billing accounts list:*)",
      "Bash(gcloud projects create:*)",
      "Bash(gcloud billing projects link:*)",
      "Bash(gcloud config set:*)",
      "Bash(gcloud services enable:*)",
      "Bash(gcloud storage buckets create:*)",
      "Bash(gcloud storage buckets update:*)",
      "Bash(terraform init:*)",
      "Bash(export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/.gcloud/application_default_credentials.json\")",
      "Bash(terraform plan:*)",
      "Bash(terraform apply:*)",
      "Bash(terraform import:*)",
      "Bash(gcloud projects:*)",
      "Bash(npm create:*)",
      "Bash(gcloud sql instances describe:*)",
      "Bash(terraform output:*)",
      "Bash(gcloud secrets versions access:*)",
      "Bash(gcloud secrets list:*)",
      "Bash(./scripts/run_migrations_auto.sh:*)",
      "Read(//opt/homebrew/**)",
      "Read(//private/tmp/**)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Read(//tmp/**)",
      "Bash(gcloud sql instances patch:*)",
      "Bash(curl:*)",
      "Bash(/Users/richedwards/AI-Dev-Projects/Vividly/scripts/connect_and_migrate.sh:*)",
      "Bash(/Users/richedwards/AI-Dev-Projects/Vividly/scripts/run_migrations_now.sh:*)",
      "Bash(/Users/richedwards/AI-Dev-Projects/Vividly/scripts/run_all_migrations_final.sh:*)",
      "Bash(/Users/richedwards/AI-Dev-Projects/Vividly/scripts/reset_database.sh:*)",
      "Bash(bash:*)",
      "Bash(python -m pytest:*)",
      "Bash(pip install:*)",
      "Bash(PYTHONPATH=/Users/richedwards/AI-Dev-Projects/Vividly/backend python -m pytest:*)",
      "Bash(DATABASE_URL=sqlite:///:memory: SECRET_KEY=test_secret_key python -m pytest:*)",
      "Bash(DATABASE_URL=sqlite:///:memory: SECRET_KEY=test_secret_key_12345 ALGORITHM=HS256 DEBUG=True CORS_ORIGINS=http://localhost python -m pytest:*)",
      "Bash(python3:*)",
      "Bash(source venv_test/bin/activate)",
      "Bash(PYTHONPATH=/Users/richedwards/AI-Dev-Projects/Vividly/backend DATABASE_URL=sqlite:///:memory: SECRET_KEY=test_secret_key_12345 ALGORITHM=HS256 DEBUG=True CORS_ORIGINS=http://localhost ./venv_test/bin/python -m pytest:*)",
      "Bash(npm install:*)",
      "Bash(npx playwright install:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd comprehensive security testing framework\n\nImplement multi-layered security testing integrated into CI/CD pipeline:\n\nSecurity Testing Tools:\n- SAST: Bandit (Python), Semgrep (multi-language), CodeQL\n- DAST: OWASP ZAP for dynamic application testing\n- Dependency scanning: pip-audit, Safety (Python), npm audit (Node.js)\n- Secret scanning: detect-secrets for credential detection\n- Container security: Trivy for Dockerfile scanning\n- Infrastructure security: tfsec for Terraform validation\n\nBackend Security Tests:\n- Authentication security (JWT, sessions, passwords, brute force)\n- Authorization and RBAC (role-based access control)\n- API security (mass assignment, BOLA/IDOR, data exposure)\n- Injection prevention (SQL, NoSQL, XSS, LDAP, command injection)\n- Rate limiting and business logic validation\n- Input validation and CORS/CSRF protection\n- Security headers and data leakage prevention\n- 100+ custom security test cases in pytest\n\nCI/CD Integration:\n- GitHub Actions workflow with 11 automated security jobs\n- Runs on push, PR, daily schedule (2 AM UTC), and manual trigger\n- SARIF reports uploaded to GitHub Security tab\n- Automated PR comments with security summaries\n- Artifact reports for detailed analysis\n\nLocal Testing:\n- Comprehensive test script: scripts/run-security-tests.sh\n- Individual tool execution support\n- JSON, HTML, and SARIF report generation\n- Reports saved to security-reports/ directory\n\nConfiguration Files:\n- .bandit: Bandit SAST configuration\n- .zap/rules.tsv: OWASP ZAP scanning rules\n- requirements-security.txt: Security tool dependencies\n- SECURITY_TESTING.md: Complete documentation (300+ lines)\n\nFeatures:\n- Shift-left security testing\n- Defense in depth with multiple security layers\n- False positive management with configurable rules\n- Continuous security monitoring\n- Compliance-ready (SOC2, PCI-DSS)\n\nðŸ¤– Generated with Claude Code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(DATABASE_URL=sqlite:///:memory: SECRET_KEY=test_secret_key_12345 ALGORITHM=HS256 DEBUG=True CORS_ORIGINS=http://localhost PYTHONPATH=/Users/richedwards/AI-Dev-Projects/Vividly/backend ./venv_test/bin/python -m pytest:*)",
      "Bash(./venv_test/bin/pip:*)",
      "Bash(git commit:*)",
      "Bash(PYTHONPATH=/Users/richedwards/AI-Dev-Projects/Vividly/backend DATABASE_URL=\"sqlite:///:memory:\" SECRET_KEY=test_secret_key_12345 ./venv_test/bin/python:*)",
      "Bash(DATABASE_URL=\"sqlite:///:memory:\" SECRET_KEY=test_secret_key_12345 ALGORITHM=HS256 DEBUG=True CORS_ORIGINS=http://localhost PYTHONPATH=/Users/richedwards/AI-Dev-Projects/Vividly/backend ./backend/venv_test/bin/python -m pytest:*)",
      "Bash(DATABASE_URL=\"sqlite:///:memory:\" SECRET_KEY=test_secret_key_12345 ALGORITHM=HS256 DEBUG=True CORS_ORIGINS=http://localhost PYTHONPATH=/Users/richedwards/AI-Dev-Projects/Vividly/backend /Users/richedwards/AI-Dev-Projects/Vividly/backend/venv_test/bin/python -m pytest:*)",
      "Bash(git reset:*)",
      "Bash(PYTHONPATH=/Users/richedwards/AI-Dev-Projects/Vividly/backend /Users/richedwards/AI-Dev-Projects/Vividly/backend/venv_test/bin/python:*)",
      "Bash(DATABASE_URL=\"sqlite:///:memory:\" SECRET_KEY=test_secret_key_12345 PYTHONPATH=/Users/richedwards/AI-Dev-Projects/Vividly/backend /Users/richedwards/AI-Dev-Projects/Vividly/backend/venv_test/bin/python:*)",
      "Bash(find:*)",
      "Bash(./backend/venv_test/bin/pip install:*)",
      "Bash(DATABASE_URL=\"sqlite:///:memory:\" SECRET_KEY=test_secret_key_12345 ALGORITHM=HS256 DEBUG=True CORS_ORIGINS=http://localhost PYTHONPATH=/Users/richedwards/AI-Dev-Projects/Vividly/backend /Users/richedwards/AI-Dev-Projects/Vividly/backend/venv_test/bin/python:*)"
    ],
    "deny": [],
    "ask": []
  }
}
