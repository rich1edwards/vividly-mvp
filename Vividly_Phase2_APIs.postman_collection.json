{
  "info": {
    "name": "Vividly Phase 2 - Core Backend APIs",
    "description": "Complete API collection for Vividly MVP Phase 2 (Core Backend Services)\n\n**Sprint Coverage**:\n- Sprint 1: Authentication, Students, Teachers (28 points)\n- Sprint 2: Admin, Topics, Content (30 points)\n- Sprint 3: Cache, Delivery, Notifications (26 points)\n\n**Environment Variables**:\n- `base_url`: API base URL (e.g., http://localhost:8000)\n- `access_token`: JWT access token from login\n- `refresh_token`: JWT refresh token from login\n- `student_token`: Access token for student role\n- `teacher_token`: Access token for teacher role\n- `admin_token`: Access token for admin role\n\n**Created**: October 28, 2025",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "vividly-phase2-apis-v1",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "student_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "teacher_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "student_email",
      "value": "student@mnps.edu",
      "type": "string"
    },
    {
      "key": "teacher_email",
      "value": "teacher@mnps.edu",
      "type": "string"
    },
    {
      "key": "test_password",
      "value": "SecurePass123!",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "class_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Sprint 1: Foundation APIs",
      "description": "Authentication, Student Service, Teacher Service (28 points)",
      "item": [
        {
          "name": "1.1 Authentication API",
          "description": "User authentication and account management (13 points)",
          "item": [
            {
              "name": "1.1.1 Register Student",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{student_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"role\": \"student\",\n  \"grade_level\": 10\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/auth/register",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "auth", "register"]
                },
                "description": "Register a new student account.\n\n**Story**: 1.1.1 (3 points)\n**Expected**: 201 Created with user object\n**Validations**:\n- Email format\n- Password strength (8+ chars, mixed case, number)\n- Grade level required for students"
              },
              "response": [
                {
                  "name": "Success Response",
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"user_id\": \"user_abc123\",\n  \"email\": \"student@mnps.edu\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"role\": \"student\",\n  \"grade_level\": 10,\n  \"created_at\": \"2025-11-04T10:00:00Z\"\n}"
                },
                {
                  "name": "Duplicate Email",
                  "status": "Conflict",
                  "code": 409,
                  "body": "{\n  \"error\": {\n    \"code\": \"CONFLICT\",\n    \"message\": \"An account with this email already exists\",\n    \"field\": \"email\"\n  }\n}"
                }
              ]
            },
            {
              "name": "1.1.1 Register Teacher",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{teacher_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Smith\",\n  \"role\": \"teacher\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/auth/register",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "auth", "register"]
                },
                "description": "Register a new teacher account."
              },
              "response": []
            },
            {
              "name": "1.1.2 Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.collectionVariables.set('access_token', jsonData.access_token);",
                      "    pm.collectionVariables.set('refresh_token', jsonData.refresh_token);",
                      "    pm.collectionVariables.set('user_id', jsonData.user.user_id);",
                      "    console.log('Tokens saved to collection variables');",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{student_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "auth", "login"]
                },
                "description": "Authenticate user and receive JWT tokens.\n\n**Story**: 1.1.2 (2 points)\n**Expected**: 200 OK with access_token and refresh_token\n**Tokens**:\n- Access token: 24h expiration\n- Refresh token: 30d expiration\n- JWT payload: user_id, email, role\n\n**Note**: This request includes a test script that automatically saves tokens to collection variables."
              },
              "response": [
                {
                  "name": "Success Response",
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 86400,\n  \"user\": {\n    \"user_id\": \"user_abc123\",\n    \"email\": \"student@mnps.edu\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"role\": \"student\",\n    \"grade_level\": 10\n  }\n}"
                },
                {
                  "name": "Invalid Credentials",
                  "status": "Unauthorized",
                  "code": 401,
                  "body": "{\n  \"error\": {\n    \"code\": \"UNAUTHORIZED\",\n    \"message\": \"Invalid email or password\"\n  }\n}"
                }
              ]
            },
            {
              "name": "1.1.3 Refresh Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.collectionVariables.set('access_token', jsonData.access_token);",
                      "    pm.collectionVariables.set('refresh_token', jsonData.refresh_token);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/auth/refresh",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "auth", "refresh"]
                },
                "description": "Refresh access token using refresh token.\n\n**Story**: 1.1.3 (2 points)\n**Expected**: 200 OK with new tokens\n**Behavior**: Rotates refresh token (old one invalidated)"
              },
              "response": []
            },
            {
              "name": "1.1.4 Logout",
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/auth/logout",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "auth", "logout"]
                },
                "description": "Log out user and revoke tokens.\n\n**Story**: 1.1.4 (2 points)\n**Expected**: 204 No Content\n**Behavior**:\n- Access token added to Redis blacklist\n- Refresh token revoked in database\n- Subsequent requests with token return 401"
              },
              "response": []
            },
            {
              "name": "1.1.5 Get Current User (Me)",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/auth/me",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "auth", "me"]
                },
                "description": "Get current authenticated user's profile.\n\n**Story**: 1.1.5 (2 points)\n**Expected**: 200 OK with user profile\n**Auth**: Requires valid JWT in Authorization header"
              },
              "response": [
                {
                  "name": "Student Profile",
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"user_id\": \"user_abc123\",\n  \"email\": \"student@mnps.edu\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"role\": \"student\",\n  \"grade_level\": 10,\n  \"school_id\": \"school_hillsboro_hs\",\n  \"interests\": [\"int_basketball\", \"int_music\"],\n  \"created_at\": \"2025-11-01T10:00:00Z\",\n  \"last_login_at\": \"2025-11-04T09:15:00Z\"\n}"
                }
              ]
            },
            {
              "name": "1.1.6 Request Password Reset",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{student_email}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/auth/reset-password",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "auth", "reset-password"]
                },
                "description": "Request password reset link via email.\n\n**Story**: 1.1.6 (2 points)\n**Expected**: 200 OK (always, for security)\n**Behavior**: Generates reset token, sends email"
              },
              "response": []
            },
            {
              "name": "1.1.6 Confirm Password Reset",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reset_token\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"new_password\": \"NewSecurePass123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/auth/reset-password/confirm",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "auth", "reset-password", "confirm"]
                },
                "description": "Confirm password reset with token.\n\n**Story**: 1.1.6 (2 points)\n**Expected**: 200 OK on success, 400 on invalid token\n**Behavior**: Updates password, revokes all sessions"
              },
              "response": []
            }
          ]
        },
        {
          "name": "1.2 Student Service",
          "description": "Student profile, interests, and progress (8 points)",
          "item": [
            {
              "name": "1.2.1 Get Student Profile",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/students/profile",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "students", "profile"]
                },
                "description": "Get current student's profile.\n\n**Story**: 1.2.1 (3 points)\n**Expected**: 200 OK with student profile\n**Auth**: Requires student role\n**Includes**: Interests, progress summary"
              },
              "response": [
                {
                  "name": "Success Response",
                  "status": "OK",
                  "code": 200,
                  "body": "{\n  \"student_id\": \"user_abc123\",\n  \"email\": \"student@mnps.edu\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"grade_level\": 10,\n  \"school_id\": \"school_hillsboro_hs\",\n  \"school_name\": \"Hillsboro High School\",\n  \"interests\": [\n    {\n      \"interest_id\": \"int_basketball\",\n      \"name\": \"Basketball\",\n      \"category\": \"sports\",\n      \"icon_url\": \"https://cdn.vividly.edu/icons/basketball.svg\",\n      \"selected_at\": \"2025-11-01T10:30:00Z\"\n    }\n  ],\n  \"progress_summary\": {\n    \"topics_completed\": 5,\n    \"videos_watched\": 12,\n    \"total_watch_time_minutes\": 45,\n    \"streak_days\": 3\n  },\n  \"created_at\": \"2025-11-01T10:00:00Z\"\n}"
                }
              ]
            },
            {
              "name": "1.2.1 Update Student Profile",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"first_name\": \"Jonathan\",\n  \"grade_level\": 11\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/students/profile",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "students", "profile"]
                },
                "description": "Update student profile fields.\n\n**Story**: 1.2.1 (3 points)\n**Expected**: 200 OK with updated profile\n**Allowed Fields**: first_name, last_name, grade_level\n**Cannot Change**: email, role"
              },
              "response": []
            },
            {
              "name": "1.2.2 Get Student Interests",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/students/interests",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "students", "interests"]
                },
                "description": "Get student's selected interests.\n\n**Story**: 1.2.2 (3 points)\n**Expected**: 200 OK with interests list\n**Auth**: Requires student role"
              },
              "response": []
            },
            {
              "name": "1.2.2 Update Student Interests",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"interest_ids\": [\"int_basketball\", \"int_music\", \"int_coding\"]\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/students/interests",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "students", "interests"]
                },
                "description": "Update student's interests.\n\n**Story**: 1.2.2 (3 points)\n**Expected**: 200 OK with updated interests\n**Validation**:\n- Min 1, max 5 interests\n- No duplicates\n- Interest IDs must exist\n**Returns**: 422 on validation error"
              },
              "response": [
                {
                  "name": "Validation Error",
                  "status": "Unprocessable Entity",
                  "code": 422,
                  "body": "{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"You must select between 1 and 5 interests\",\n    \"details\": {\n      \"field\": \"interest_ids\",\n      \"constraint\": \"length\",\n      \"min\": 1,\n      \"max\": 5,\n      \"actual\": 6\n    }\n  }\n}"
                }
              ]
            },
            {
              "name": "1.2.3 Get Student Progress",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/students/progress?subject=Physics&date_from=2025-11-01",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "students", "progress"],
                  "query": [
                    {
                      "key": "subject",
                      "value": "Physics",
                      "description": "Filter by subject (optional)"
                    },
                    {
                      "key": "date_from",
                      "value": "2025-11-01",
                      "description": "Filter from date (ISO 8601, optional)"
                    },
                    {
                      "key": "date_to",
                      "value": "",
                      "description": "Filter to date (ISO 8601, optional)",
                      "disabled": true
                    }
                  ]
                },
                "description": "Get student's learning progress.\n\n**Story**: 1.2.3 (2 points)\n**Expected**: 200 OK with progress data\n**Includes**:\n- Summary (topics completed, videos watched, streak)\n- Recent activity (last 10 items)\n- Topic matrix (completion by subject/unit)\n**Filters**: subject, date_from, date_to"
              },
              "response": []
            }
          ]
        },
        {
          "name": "1.3 Teacher Service",
          "description": "Teacher profile, class management, student requests (7 points)",
          "item": [
            {
              "name": "1.3.1 Get Teacher Profile",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/teachers/profile",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "teachers", "profile"]
                },
                "description": "Get current teacher's profile.\n\n**Story**: 1.3.1 (2 points)\n**Expected**: 200 OK with teacher profile\n**Auth**: Requires teacher role\n**Includes**: School info, subjects, student/class counts"
              },
              "response": []
            },
            {
              "name": "1.3.1 Get Teacher Classes (List)",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/teachers/classes?limit=20&cursor=",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "teachers", "classes"],
                  "query": [
                    {
                      "key": "limit",
                      "value": "20",
                      "description": "Number of classes per page (1-100)"
                    },
                    {
                      "key": "cursor",
                      "value": "",
                      "description": "Pagination cursor (optional)"
                    }
                  ]
                },
                "description": "Get teacher's classes list.\n\n**Story**: 1.3.1 (2 points)\n**Expected**: 200 OK with paginated class list\n**Includes**: Student counts, active students (7d)\n**Pagination**: Cursor-based"
              },
              "response": []
            },
            {
              "name": "1.3.2 Create Class",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.collectionVariables.set('class_id', jsonData.class_id);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Physics 101 - Period 1\",\n  \"subject\": \"Physics\",\n  \"grade_level\": 10,\n  \"description\": \"Introduction to Mechanics\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/teachers/classes",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "teachers", "classes"]
                },
                "description": "Create new class.\n\n**Story**: 1.3.2 (3 points)\n**Expected**: 201 Created with class details\n**Behavior**: Generates unique class_id and class_code\n**Class Code Format**: SUBJ-XXX-123 (for student join)"
              },
              "response": []
            },
            {
              "name": "1.3.2 Get Class Details",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/teachers/classes/{{class_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "teachers", "classes", "{{class_id}}"]
                },
                "description": "Get detailed class information.\n\n**Story**: 1.3.2 (3 points)\n**Expected**: 200 OK with class and students\n**Auth**: Must be class teacher\n**Includes**: Student list with progress metrics"
              },
              "response": []
            },
            {
              "name": "1.3.2 Update Class",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Physics 101 - Period 2\",\n  \"description\": \"Updated description\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/teachers/classes/{{class_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "teachers", "classes", "{{class_id}}"]
                },
                "description": "Update class information.\n\n**Story**: 1.3.2 (3 points)\n**Expected**: 200 OK with updated class\n**Allowed Fields**: name, description\n**Cannot Change**: subject, grade_level, class_code"
              },
              "response": []
            },
            {
              "name": "1.3.2 Archive Class",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/teachers/classes/{{class_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "teachers", "classes", "{{class_id}}"]
                },
                "description": "Archive (soft delete) class.\n\n**Story**: 1.3.2 (3 points)\n**Expected**: 204 No Content\n**Behavior**: Soft delete (marks as archived)\n**Validation**: Prevents deletion if students have progress"
              },
              "response": []
            },
            {
              "name": "1.3.3 Create Student Account Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"student_first_name\": \"Michael\",\n  \"student_last_name\": \"Johnson\",\n  \"student_email\": \"michael.johnson@mnps.edu\",\n  \"grade_level\": 10,\n  \"class_id\": \"{{class_id}}\",\n  \"notes\": \"Transfer student from East High\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/teachers/student-requests",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "teachers", "student-requests"]
                },
                "description": "Request new student account.\n\n**Story**: 1.3.3 (2 points)\n**Expected**: 201 Created with request details\n**Behavior**:\n- Creates request with pending status\n- Routes to school admin for approval\n- Queues notification email"
              },
              "response": []
            },
            {
              "name": "1.3.3 Get Student Requests",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/teachers/student-requests?status=pending&limit=20",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "teachers", "student-requests"],
                  "query": [
                    {
                      "key": "status",
                      "value": "pending",
                      "description": "Filter by status (optional)"
                    },
                    {
                      "key": "limit",
                      "value": "20",
                      "description": "Number of requests per page"
                    },
                    {
                      "key": "cursor",
                      "value": "",
                      "description": "Pagination cursor (optional)",
                      "disabled": true
                    }
                  ]
                },
                "description": "Get teacher's student account requests.\n\n**Story**: 1.3.3 (2 points)\n**Expected**: 200 OK with paginated request list\n**Filters**: status (pending, approved, rejected)\n**Pagination**: Cursor-based"
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Sprint 2: Management APIs",
      "description": "Admin Service, Topics & Interests, Content Metadata (30 points) - Coming Soon",
      "item": []
    },
    {
      "name": "Sprint 3: Infrastructure APIs",
      "description": "Cache Service, Content Delivery, Notifications (26 points) - Coming Soon",
      "item": []
    }
  ]
}
