name: Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # Backend SAST with Bandit
  backend-sast:
    name: Backend SAST (Bandit)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install bandit[toml]

      - name: Run Bandit
        run: |
          cd backend
          bandit -r app/ \
            -f sarif \
            -o bandit-report.sarif \
            --severity-level medium \
            --confidence-level medium \
            --exclude tests/
        continue-on-error: true

      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: backend/bandit-report.sarif
          category: bandit

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: backend/bandit-report.sarif

  # Advanced SAST with Semgrep
  semgrep-scan:
    name: Advanced SAST (Semgrep)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep --config=auto \
            --sarif \
            --output=semgrep-report.sarif \
            backend/app/
        continue-on-error: true

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-report.sarif
          category: semgrep

  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Backend Dependency Scanning
  backend-dependencies:
    name: Backend Dependency Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-audit
        run: pip install pip-audit

      - name: Run pip-audit
        run: |
          cd backend
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: backend/pip-audit-report.json

  # Frontend Dependency Scanning
  frontend-dependencies:
    name: Frontend Dependency Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --json > npm-audit-report.json || true

      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: frontend/npm-audit-report.json

  # Secret Scanning
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install detect-secrets
        run: pip install detect-secrets

      - name: Run detect-secrets
        run: |
          detect-secrets scan \
            --all-files \
            --exclude-files 'package-lock\.json$|\.lock$|\.pyc$|\.png$|\.jpg$' \
            > secrets-baseline.json || true

      - name: Check for secrets
        run: |
          if [ -s secrets-baseline.json ]; then
            echo "::warning::Potential secrets detected. Review secrets-baseline.json"
            cat secrets-baseline.json
          fi

      - name: Upload secrets report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-report
          path: secrets-baseline.json

  # Container Security Scanning
  container-security:
    name: Container Security (Trivy)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'backend/'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
        continue-on-error: true

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'frontend/'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results (Backend)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-backend-results.sarif'
          category: 'trivy-backend'

      - name: Upload Trivy results (Frontend)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-frontend-results.sarif'
          category: 'trivy-frontend'

  # Infrastructure Security (Terraform)
  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    if: github.event_name != 'schedule'  # Skip on scheduled runs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec-results.sarif
          working_directory: terraform/
        continue-on-error: true

      - name: Upload tfsec SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec-results.sarif
          category: tfsec

  # Custom Security Tests
  custom-security-tests:
    name: Custom Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements-test.txt

      - name: Run security tests
        run: |
          cd backend
          DATABASE_URL=sqlite:///:memory: \
          SECRET_KEY=test_secret_key_12345 \
          pytest tests/security/ \
            -v \
            --tb=short \
            --junit-xml=security-tests-junit.xml
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: backend/security-tests-junit.xml

  # OWASP ZAP DAST (Dynamic Application Security Testing)
  dast-scan:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'https://dev.vividly.com'  # Update with your staging/dev URL
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        continue-on-error: true

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html

  # Security Report Summary
  security-summary:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [
      backend-sast,
      semgrep-scan,
      backend-dependencies,
      frontend-dependencies,
      secret-scanning,
      container-security,
      custom-security-tests
    ]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate Security Summary
        run: |
          echo "# Security Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Tests Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend SAST (Bandit)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Advanced SAST (Semgrep)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend Dependency Scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend Dependency Scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secret Scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container Security" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Custom Security Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Reports" >> $GITHUB_STEP_SUMMARY
          echo "All security reports are available as artifacts." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Review the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🔒 Security testing completed. Check the Actions tab for detailed results and artifacts.'
            })
