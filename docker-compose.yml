version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vividly-postgres
    environment:
      POSTGRES_USER: vividly
      POSTGRES_PASSWORD: vividly_dev_password
      POSTGRES_DB: vividly_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vividly"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vividly-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vividly-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass vividly_redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vividly-network

  # API Gateway (FastAPI Backend)
  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile.api-gateway
    container_name: vividly-api-gateway
    ports:
      - "8080:8080"
    environment:
      # Database
      DATABASE_URL: postgresql://vividly:vividly_dev_password@postgres:5432/vividly_dev

      # Redis
      REDIS_URL: redis://:vividly_redis_password@redis:6379/0

      # JWT Authentication
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 1440  # 24 hours for dev

      # Environment
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG

      # Google Cloud (for local dev, use emulator or service account)
      GOOGLE_CLOUD_PROJECT: vividly-dev-rich
      GOOGLE_APPLICATION_CREDENTIALS: /app/credentials/service-account.json

      # External APIs (add your keys)
      NANO_BANANA_API_KEY: ${NANO_BANANA_API_KEY:-your-api-key}

      # Rate Limiting
      CONTENT_REQUEST_RATE_LIMIT: 10

      # CORS
      CORS_ORIGINS: http://localhost:3000,http://localhost:5173

    volumes:
      - ./backend/app:/app/app  # Hot reload for development
      - ./backend/scripts:/app/scripts
      - ~/.gcloud:/app/credentials:ro  # Mount GCP credentials
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vividly-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload

  # Admin Service (FastAPI Backend)
  admin-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.admin-service
    container_name: vividly-admin-service
    ports:
      - "8081:8081"
    environment:
      DATABASE_URL: postgresql://vividly:vividly_dev_password@postgres:5432/vividly_dev
      REDIS_URL: redis://:vividly_redis_password@redis:6379/1
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_ALGORITHM: HS256
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      GOOGLE_CLOUD_PROJECT: vividly-dev-rich
      GOOGLE_APPLICATION_CREDENTIALS: /app/credentials/service-account.json
    volumes:
      - ./backend/app:/app/app
      - ./backend/scripts:/app/scripts
      - ~/.gcloud:/app/credentials:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vividly-network
    command: uvicorn app.admin_main:app --host 0.0.0.0 --port 8081 --reload

  # Content Worker (Background Job Processor)
  content-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.content-worker
    container_name: vividly-content-worker
    environment:
      DATABASE_URL: postgresql://vividly:vividly_dev_password@postgres:5432/vividly_dev
      REDIS_URL: redis://:vividly_redis_password@redis:6379/2
      GOOGLE_CLOUD_PROJECT: vividly-dev-rich
      GOOGLE_APPLICATION_CREDENTIALS: /app/credentials/service-account.json
      NANO_BANANA_API_KEY: ${NANO_BANANA_API_KEY:-your-api-key}
      PUBSUB_SUBSCRIPTION: content-requests-dev-dlq
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG
    volumes:
      - ./backend/app:/app/app
      - ./backend/scripts:/app/scripts
      - ~/.gcloud:/app/credentials:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vividly-network
    command: python -m app.workers.content_worker

  # Frontend (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development  # Multi-stage build: development stage
    container_name: vividly-frontend
    ports:
      - "3000:3000"
    environment:
      VITE_API_BASE_URL: http://localhost:8080/api/v1
      VITE_ADMIN_API_BASE_URL: http://localhost:8081/api/v1/admin
      VITE_ENVIRONMENT: development
    volumes:
      - ./frontend/src:/app/src  # Hot reload
      - ./frontend/public:/app/public
      - /app/node_modules  # Prevent overwriting node_modules
    networks:
      - vividly-network
    command: npm run dev -- --host 0.0.0.0 --port 3000

  # Database Admin UI (Adminer)
  adminer:
    image: adminer:latest
    container_name: vividly-adminer
    ports:
      - "8082:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - vividly-network

  # Redis Commander (Redis UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: vividly-redis-commander
    ports:
      - "8083:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:1:vividly_redis_password
    depends_on:
      - redis
    networks:
      - vividly-network

  # Nginx (Reverse Proxy - Optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: vividly-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - api-gateway
      - admin-service
      - frontend
    networks:
      - vividly-network
    profiles:
      - full  # Only start with: docker-compose --profile full up

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  vividly-network:
    driver: bridge

# Usage:
# - Development (minimal): docker-compose up postgres redis
# - Full stack: docker-compose up
# - With nginx: docker-compose --profile full up
# - Rebuild: docker-compose up --build
# - Logs: docker-compose logs -f [service]
# - Stop: docker-compose down
# - Clean: docker-compose down -v (removes volumes)
